@charset "UTF-8";
/* ↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧

This is project follows the Inverted Triangle CSS (ITCSS)
organizational structure created by Harry Roberts.

The organization is from low to high specifity
and aims to create more scalable, modular, and structured css

The inverted triangle:

                   ________________
    Settings       |______________|       Least Specific
       Tools        |____________|
     Generic         |__________|              |
    Elements          |________|               |
     Objects           |______|                |
  Components            |____|
      Trumps             |__|             Most Specific


Settings ---- Global variables, config switches.
Tools ------- Default mixins and functions.
Generic ----- Ground-zero styles (Normalize.css, resets, box-sizing).
Elements ---- Unclassed HTML elements (type selectors).
Objects ----- Cosmetic-free design patterns.
Components -- Designed components, chunks of UI.
Trumps ------ Helpers and overrides.

↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥ */
/* Fonts */
/* Import Settings */
@font-face {
  font-family: 'Apercu';
  src: url("/assets/fonts/Apercu-Light.eot");
  src: local("/assets/fonts/Apercu Light"), local("Apercu-Light"), url("/assets/fonts/Apercu-Light.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/Apercu-Light.woff") format("woff"), url("/assets/fonts/Apercu-Light.ttf") format("truetype");
  font-weight: 300;
  font-style: normal; }
@font-face {
  font-family: 'Apercu';
  src: url("/assets/fonts/Apercu-LightItalic.eot");
  src: local("/assets/fonts/Apercu Light Italic"), local("Apercu-LightItalic"), url("/assets/fonts/Apercu-LightItalic.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/Apercu-LightItalic.woff") format("woff"), url("/assets/fonts/Apercu-LightItalic.ttf") format("truetype");
  font-weight: 300;
  font-style: italic; }
@font-face {
  font-family: 'Apercu';
  src: url("/assets/fonts/Apercu.eot");
  src: local("/assets/fonts/Apercu Regular"), local("Apercu"), url("/assets/fonts/Apercu.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/Apercu.woff") format("woff"), url("/assets/fonts/Apercu.ttf") format("truetype");
  font-weight: 400;
  font-style: normal; }
@font-face {
  font-family: 'Apercu';
  src: url("/assets/fonts/Apercu-Italic.eot");
  src: local("/assets/fonts/Apercu Italic"), local("Apercu-Italic"), url("/assets/fonts/Apercu-Italic.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/Apercu-Italic.woff") format("woff"), url("/assets/fonts/Apercu-Italic.ttf") format("truetype");
  font-weight: 400;
  font-style: italic; }
@font-face {
  font-family: 'Apercu';
  src: url("/assets/fonts/Apercu-MediumItalic.eot");
  src: local("/assets/fonts/Apercu Medium Italic"), local("Apercu-MediumItalic"), url("/assets/fonts/Apercu-MediumItalic.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/Apercu-MediumItalic.woff") format("woff"), url("/assets/fonts/Apercu-MediumItalic.ttf") format("truetype");
  font-weight: 500;
  font-style: italic; }
@font-face {
  font-family: 'Apercu';
  src: url("/assets/fonts/Apercu-Medium.eot");
  src: local("/assets/fonts/Apercu Medium"), local("Apercu-Medium"), url("/assets/fonts/Apercu-Medium.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/Apercu-Medium.woff") format("woff"), url("/assets/fonts/Apercu-Medium.ttf") format("truetype");
  font-weight: 500;
  font-style: normal; }
@font-face {
  font-family: 'Apercu';
  src: url("/assets/fonts/Apercu-Bold.eot");
  src: local("/assets/fonts/Apercu Bold"), local("Apercu-Bold"), url("/assets/fonts/Apercu-Bold.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/Apercu-Bold.woff") format("woff"), url("/assets/fonts/Apercu-Bold.ttf") format("truetype");
  font-weight: 600;
  font-style: normal; }
@font-face {
  font-family: 'Apercu';
  src: url("/assets/fonts/Apercu-BoldItalic.eot");
  src: local("/assets/fonts/Apercu Bold Italic"), local("Apercu-BoldItalic"), url("/assets/fonts/Apercu-BoldItalic.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/Apercu-BoldItalic.woff") format("woff"), url("/assets/fonts/Apercu-BoldItalic.ttf") format("truetype");
  font-weight: 600;
  font-style: italic; }
@font-face {
  font-family: 'Apercu-Mono';
  src: url("/assets/fonts/Apercu-Mono.eot");
  src: local("/assets/fonts/Apercu Mono"), local("Apercu-Mono"), url("/assets/fonts/Apercu-Mono.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/Apercu-Mono.woff") format("woff"), url("/assets/fonts/Apercu-Mono.ttf") format("truetype");
  font-weight: normal;
  font-style: normal; }
/* Import Tools */
.clearfix:after {
  content: "";
  visibility: hidden;
  display: block;
  height: 0;
  clear: both; }

/* Import Generic */
/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/* Import Elements */
a {
  text-decoration: none;
  transition: all 200ms;
  display: inline-block;
  color: #4F3DF3; }
  a:hover {
    transition: all 200ms;
    color: #4F3DF3; }

@-ms-viewport {
  width: device-width; }
* {
  box-sizing: border-box; }

html {
  font-size: 18px; }

body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-tap-highlight-color: #F0F1F4;
  font-family: Apercu, sans-serif;
  background: #161C2D; }

::-moz-selection {
  color: #161C2D;
  text-shadow: none;
  background-color: #4F3DF3; }

::selection {
  color: #161C2D;
  text-shadow: none;
  background-color: #4F3DF3; }

h1, h2, h3,
blockquote > p, h4, h5, h6 {
  line-height: 1.2;
  font-weight: 500;
  color: #FFFFFF;
  margin-top: 0;
  padding: 0; }

h1 {
  font-size: 4.444rem;
  margin-bottom: 32px;
  font-weight: 200; }

@media screen and (min-width: 60em) {
  h1 {
    font-size: 4.444rem; } }
h2 {
  font-size: 4.444rem;
  margin-bottom: 32px;
  font-weight: 200;
  color: #FFFFFF; }

@media screen and (min-width: 60em) {
  h2 {
    font-size: 4.444rem; } }
h3,
blockquote > p {
  font-size: 1.667rem;
  font-weight: 200;
  margin-bottom: 64px; }

h4 {
  font-size: 1.333rem;
  margin-bottom: 24px; }

h5 {
  font-size: 18px;
  font-weight: 400;
  font-family: Apercu-Mono;
  color: #4F3DF3;
  margin-bottom: 64px; }

h6 {
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 32px;
  color: #6A687B; }

p, ul {
  font-weight: 200;
  font-size: 1.111rem;
  line-height: 1.34;
  color: #FFFFFF;
  margin-bottom: 32px;
  margin-top: 0; }

a {
  color: #4F3DF3;
  font-weight: 500; }
  a:hover {
    color: #4F3DF3; }

img, video, iframe {
  max-width: 100%; }

.e-button {
  display: inline-block;
  padding: 16px 40px;
  background: #4F3DF3;
  color: #fff;
  font-weight: 600;
  font-size: 18px;
  line-height: 1.34;
  border-radius: 100px; }
  .e-button:hover {
    background: #4F3DF3;
    color: #fff; }
  .e-button--secondary {
    text-transform: uppercase; }
  .e-button--uppercase {
    background: #4F3DF3; }
    .e-button--uppercase:hover {
      background: #4F3DF3;
      color: #fff; }
  .e-button--outlined {
    background: none;
    border: 1px solid #4F3DF3;
    color: #4F3DF3; }
  .e-button--small {
    padding: 8px 16px;
    background: #4F3DF3;
    color: #4F3DF3;
    font-size: .75rem;
    text-transform: capitalize;
    font-weight: 600;
    line-height: .75rem; }
  .e-button--no-uppercase {
    text-transform: none; }

.e-input-text {
  display: inline-block;
  padding: 14px;
  background: #FFFFFF;
  border: 2px solid #F0F1F4;
  color: #161C2D;
  font-weight: 400;
  font-size: 18px;
  line-height: 1.34;
  border-radius: 4px;
  margin-right: 16px; }
  .e-input-text ::-webkit-input-placeholder {
    color: #F0F1F4;
    font-weight: 400;
    font-size: 18px; }
  .e-input-text :-moz-placeholder {
    color: #F0F1F4;
    font-weight: 400;
    font-size: 18px; }
  .e-input-text ::-moz-placeholder {
    color: #F0F1F4;
    font-weight: 400;
    font-size: 18px; }
  .e-input-text :-ms-input-placeholder {
    color: #F0F1F4;
    font-weight: 400;
    font-size: 18px; }

.e-input-validation {
  display: inline-block;
  margin-top: 8px;
  border-radius: 4px;
  font-weight: 500;
  font-size: 0.7778rem;
  padding: 8px; }
  .e-input-validation--success {
    background: #D3F1D8;
    color: #61CC71; }
  .e-input-validation--failed {
    background: #E7949B;
    color: #CC1423; }

/* Import Objects */
.o-wrapper {
  max-width: 1220px;
  margin: 0 auto; }

/* Import Vendor */
/**
 * Owl Carousel v2.2.1
 * Copyright 2013-2017 David Deutsch
 * Licensed under  ()
 */
/*
 *  Owl Carousel - Core
 */
.owl-carousel {
  display: none;
  width: 100%;
  -webkit-tap-highlight-color: transparent;
  /* position relative and z-index fix webkit rendering fonts issue */
  position: relative;
  z-index: 1; }

.owl-carousel .owl-stage {
  position: relative;
  -ms-touch-action: pan-Y;
  -moz-backface-visibility: hidden;
  /* fix firefox animation glitch */ }

.owl-carousel .owl-stage:after {
  content: ".";
  display: block;
  clear: both;
  visibility: hidden;
  line-height: 0;
  height: 0; }

.owl-carousel .owl-stage-outer {
  position: relative;
  overflow: hidden;
  /* fix for flashing background */
  -webkit-transform: translate3d(0px, 0px, 0px); }

.owl-carousel .owl-wrapper,
.owl-carousel .owl-item {
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
  -ms-transform: translate3d(0, 0, 0); }

.owl-carousel .owl-item {
  position: relative;
  min-height: 1px;
  float: left;
  -webkit-backface-visibility: hidden;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none; }

.owl-carousel .owl-item img {
  display: block;
  width: 100%; }

.owl-carousel .owl-nav.disabled,
.owl-carousel .owl-dots.disabled {
  display: none; }

.owl-carousel .owl-nav .owl-prev,
.owl-carousel .owl-nav .owl-next,
.owl-carousel .owl-dot {
  cursor: pointer;
  cursor: hand;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none; }

.owl-carousel.owl-loaded {
  display: block; }

.owl-carousel.owl-loading {
  opacity: 0;
  display: block; }

.owl-carousel.owl-hidden {
  opacity: 0; }

.owl-carousel.owl-refresh .owl-item {
  visibility: hidden; }

.owl-carousel.owl-drag .owl-item {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none; }

.owl-carousel.owl-grab {
  cursor: move;
  cursor: -webkit-grab;
  cursor: grab; }

.owl-carousel.owl-rtl {
  direction: rtl; }

.owl-carousel.owl-rtl .owl-item {
  float: right; }

/* No Js */
.no-js .owl-carousel {
  display: block; }

/*
 *  Owl Carousel - Animate Plugin
 */
.owl-carousel .animated {
  animation-duration: 1000ms;
  animation-fill-mode: both; }

.owl-carousel .owl-animated-in {
  z-index: 0; }

.owl-carousel .owl-animated-out {
  z-index: 1; }

.owl-carousel .fadeOut {
  animation-name: fadeOut; }

@keyframes fadeOut {
  0% {
    opacity: 1; }
  100% {
    opacity: 0; } }
/*
 * 	Owl Carousel - Auto Height Plugin
 */
.owl-height {
  transition: height 500ms ease-in-out; }

/*
 * 	Owl Carousel - Lazy Load Plugin
 */
.owl-carousel .owl-item .owl-lazy {
  opacity: 0;
  transition: opacity 400ms ease; }

.owl-carousel .owl-item img.owl-lazy {
  transform-style: preserve-3d; }

/* Import Components */
.c-header {
  padding: 16px; }
  .c-header.cookie-on {
    margin-top: 0; }

.c-header__logos {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: row;
      flex-direction: row;
  text-align: center;
  -ms-flex-pack: distribute;
      justify-content: space-around; }

.c-header__partner-logo {
  height: 72px;
  margin-left: 2rem; }

@media screen and (min-width: 60em) {
  .c-header__partner-logo {
    height: 40px; } }
.c-header .e-button {
  display: none; }

@media screen and (min-width: 60em) {
  .c-header {
    position: fixed;
    z-index: 999;
    top: 0;
    left: 0;
    width: 100%;
    margin-top: 0;
    /* &--landing {
      padding:  $base-spacing-x2 $base-spacing-x4;
    } */ }
    .c-header.is-sticky {
      background-color: #FFF;
      border-color: transparent;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      transition: all .3s ease; }
    .c-header.cookie-on {
      margin-top: 80px; }
    .c-header--landing .c-logo {
      margin-left: 0; }

  .c-header__wrapper {
    width: 100%;
    padding: 0 16px;
    min-width: 915px;
    position: relative;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: row;
        flex-direction: row;
    -ms-flex-wrap: nowrap;
        flex-wrap: nowrap;
    -ms-flex-pack: justify;
        justify-content: space-between;
    -ms-flex-align: center;
        align-items: center;
    margin: 0 auto;
    align-items: center; }

  .c-header .e-button {
    display: block; } }
/**
 * Owl Carousel v2.2.1
 * Copyright 2013-2017 David Deutsch
 * Licensed under  ()
 */
/*
 * 	Default theme - Owl Carousel CSS File
 */
.c-carousel-wrapper {
  overflow: hidden; }

.c-carousel-container {
  /*
    Check if $colSpan is a valid integer number then process the parameters
    passed to the grid() mixin.
  */
  box-sizing: border-box;
  /*
    Check if $align is set to left (default) and make element floating
    to the left
  */
  float: left;
  /*
    If $grid-use-gutters is set to false (true by default) set the
    element width based on the $initColWidth process result.
  */
  /*
    Check if not 0 $offset is passed as argument and then if $gutter is 0
    set the left (based on direction) margin as offset.
  */
  margin: 0 24px 0 calc( 8.3333333333% + 24px );
  /*
    If $grid-use-gutters is true then calculate the default new width and left-margin
    based on $columns and $colSpan
  */
  /*
    Check if the $gutter have a % unit
  */
  width: calc( 50% - 24px - 12px );
  margin-top: 128px; }

.owl-carousel .owl-item .c-carousel-item {
  opacity: 0.2;
  transition: all 500ms cubic-bezier(0.86, 0, 0.07, 1); }
  .owl-carousel .owl-item .c-carousel-item h5 {
    transition: all 500ms cubic-bezier(0.86, 0, 0.07, 1);
    color: #FFFFFF; }
  .owl-carousel .owl-item .c-carousel-item p {
    font-size: 1.667rem;
    color: #FFFFFF;
    font-weight: 200; }
.owl-carousel .owl-item.active .c-carousel-item {
  opacity: 1; }
  .owl-carousel .owl-item.active .c-carousel-item h5 {
    color: #4F3DF3; }

.owl-theme .owl-stage-outer {
  overflow: visible; }

.owl-theme .owl-nav {
  margin-top: 128px;
  margin-bottom: 320px;
  text-align: left;
  -webkit-tap-highlight-color: transparent; }

.owl-theme .owl-nav [class*='owl-'] {
  cursor: pointer;
  height: 40px;
  width: 40px;
  display: inline-block;
  margin-right: 32px;
  background: #161C2D;
  border: 3px solid #4F3DF3;
  border-radius: 100%;
  text-indent: -99999px;
  overflow: hidden; }

.owl-theme .owl-nav [class*='owl-']:hover {
  border: 3px solid #4F3DF3;
  text-decoration: none; }

.owl-theme .owl-nav .disabled {
  border: 1px solid #4F3DF3;
  cursor: default; }

.owl-theme .owl-nav.disabled + .owl-dots {
  margin-top: 10px; }

.owl-theme .owl-dots {
  text-align: center;
  -webkit-tap-highlight-color: transparent; }

.owl-theme .owl-dots .owl-dot {
  display: inline-block;
  zoom: 1;
  *display: inline; }

.owl-theme .owl-dots .owl-dot span {
  width: 10px;
  height: 10px;
  margin: 5px 7px;
  background: #D6D6D6;
  display: block;
  -webkit-backface-visibility: visible;
  transition: opacity 200ms ease;
  border-radius: 30px; }

.owl-theme .owl-dots .owl-dot.active span, .owl-theme .owl-dots .owl-dot:hover span {
  background: #869791; }

.c-main-navigation {
  top: 0;
  left: 0;
  right: 0;
  position: fixed;
  display: none; }

.c-main-navigation-draft {
  -ms-flex-positive: 2;
      flex-grow: 2; }

@media screen and (min-width: 60em) {
  .c-main-navigation {
    z-index: 100;
    display: block;
    padding-top: 128px;
    padding-bottom: 128px;
    -ms-flex-positive: 2;
        flex-grow: 2;
    overflow: hidden; }
    .c-main-navigation__background {
      transition: transform 0.8s cubic-bezier(0.86, 0, 0.07, 1);
      transform: translate3d(0, -100%, 0);
      perspective: 1000px;
      background-color: #FFFFFF;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0; }

  .c-main-navigation__list {
    position: relative;
    z-index: 10;
    padding: 0;
    margin: 0;
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 66.6666666667% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 33.3333333333% - 24px - 8px ); }

  .c-main-navigation__list-item {
    display: inline-block;
    margin-right: 32px;
    font-size: 3.556rem;
    overflow: hidden;
    position: relative; }
    .c-main-navigation__list-item .c-main-navigation__line {
      position: absolute;
      bottom: 16px;
      left: 0;
      right: 0;
      height: 8px;
      overflow: hidden; }
      .c-main-navigation__list-item .c-main-navigation__line:after, .c-main-navigation__list-item .c-main-navigation__line:before {
        content: "";
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background: #4F3DF3; }
      .c-main-navigation__list-item .c-main-navigation__line:before {
        transform: translate3d(-102%, 0, 0);
        opacity: 0; }
      .c-main-navigation__list-item .c-main-navigation__line:after {
        transition: transform 0.8s cubic-bezier(0.165, 0.84, 0.44, 1);
        transform: translate3d(102%, 0, 0);
        opacity: 1; }
    .c-main-navigation__list-item .c-main-navigation__link {
      transition: transform 0.8s cubic-bezier(0.41, 0, 0.07, 1);
      transform: translate3d(0, -100%, 0);
      color: #161C2D;
      font-weight: 200; }
    .c-main-navigation__list-item--small {
      display: inline-block;
      margin-right: 130px;
      font-family: Apercu-Mono;
      font-size: 0.8889rem;
      padding-bottom: 16px;
      overflow: hidden; }
      .c-main-navigation__list-item--small .c-main-navigation__line {
        height: 4px; }
      .c-main-navigation__list-item--small .c-main-navigation__link {
        transition: transform 0.4s cubic-bezier(0.41, 0, 0.07, 1);
        transition-delay: 0;
        color: #C7C6CD; }
    .c-main-navigation__list-item:hover {
      color: #4F3DF3; }
      .c-main-navigation__list-item:hover .c-main-navigation__line:before {
        transition: transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);
        transform: translateZ(0);
        opacity: 1; }
      .c-main-navigation__list-item:hover .c-main-navigation__line:after {
        transform: translateZ(0);
        transition: none;
        opacity: 0; }
    .c-main-navigation__list-item--first {
      margin-top: 48px; }
    .c-main-navigation__list-item--active .c-main-navigation__link {
      color: #4F3DF3; }
      .c-main-navigation__list-item--active .c-main-navigation__link--more {
        background-image: url("/assets/images/navigation-small-arrow-active.svg"); }

  .c-main-navigation--open .c-main-navigation__background {
    transform: translate3d(0, 0, 0); }
  .c-main-navigation--open .c-main-navigation__list-item .c-main-navigation__link {
    transition: transform 0.8s cubic-bezier(0.41, 0, 0.07, 1);
    transition-delay: .1s;
    transform: translate3d(0, 0, 0); }
  .c-main-navigation--open .c-main-navigation__list-item--small .c-main-navigation__link {
    transition: transform 0.8s cubic-bezier(0.41, 0, 0.07, 1);
    transition-delay: .3s; } }
#nav-icon4 {
  width: 24px;
  height: 17px;
  position: relative;
  margin: 50px auto;
  transform: rotate(0deg);
  transition: 0.5s cubic-bezier(0.41, 0, 0.07, 1);
  cursor: pointer; }

#nav-icon4 span {
  display: block;
  position: absolute;
  height: 3px;
  width: 100%;
  background: #4F3DF3;
  opacity: 1;
  left: 0;
  transform: rotate(0deg);
  transition: 0.25s cubic-bezier(0.41, 0, 0.07, 1); }

/* Icon 4 */
#nav-icon4 span:nth-child(1) {
  top: 0px;
  transform-origin: left center; }

#nav-icon4 span:nth-child(2) {
  top: 14px;
  transform-origin: left center; }

#nav-icon4.open span:nth-child(1) {
  transform: rotate(45deg);
  top: -3px;
  left: 8px; }

#nav-icon4.open span:nth-child(2) {
  transform: rotate(-45deg);
  top: 14px;
  left: 8px; }

@media screen and (min-width: 60em) {
  .c-sub-navigation {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-align: center;
        align-items: center; }
    .c-sub-navigation--closed {
      height: 0;
      opacity: 0;
      overflow: hidden;
      transition: all 150ms cubic-bezier(0.86, 0, 0.07, 1); }
    .c-sub-navigation--open {
      height: 240px;
      opacity: 1;
      transition: all 150ms cubic-bezier(0.86, 0, 0.07, 1); }

  .c-sub-navigation__item {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 25% - 24px - 6px );
    margin: 0 0 0 24px; }
    .c-sub-navigation__item h3 {
      display: inline-block;
      font-weight: 400;
      color: #6A687B;
      margin-bottom: 8px;
      padding-right: 24px;
      background-image: url("/assets/images/navigation-big-arrow-inactive.svg");
      background-position: right center;
      background-size: 8px;
      background-repeat: no-repeat; }
    .c-sub-navigation__item p {
      margin-bottom: 0;
      font-size: 0.8889rem;
      color: #C7C6CD; }
    .c-sub-navigation__item--active {
      cursor: default; }
      .c-sub-navigation__item--active h3 {
        color: #4F3DF3;
        background-image: url("/assets/images/navigation-big-arrow-active.svg"); }
    .c-sub-navigation__item:hover h3 {
      color: #4F3DF3;
      background-image: url("/assets/images/navigation-big-arrow-active.svg"); }

  .c-sub-navigation__item:nth-child(1) {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 16.6666666667% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 25% - 24px - 6px ); } }
.c-mobile-navigation {
  display: none; }
  .c-mobile-navigation .e-button {
    padding: 8px 40px; }

.c-mobile-navigation__burger {
  float: right;
  color: #F0F1F4;
  font-weight: 500;
  margin-top: 8px; }

.c-mobile-navigation__list {
  padding: 32px;
  margin: 0;
  transition: all 500ms cubic-bezier(0.86, 0, 0.07, 1); }

.c-mobile-navigation__list-item {
  display: block;
  padding: 8% 0;
  text-align: center; }
  .c-mobile-navigation__list-item--active {
    color: #FFFFFF;
    font-size: 3.111rem; }

.c-mobile-navigation__link {
  color: #C7C6CD;
  font-size: 3.111rem; }

@media screen and (max-width: 60em) {
  .c-mobile-navigation {
    height: 100%;
    display: block;
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    padding: 16px;
    background: #161C2D;
    z-index: 9999; }
    .c-mobile-navigation--closed {
      max-height: 72px;
      overflow: hidden;
      transition: all 100ms cubic-bezier(0.86, 0, 0.07, 1); }
    .c-mobile-navigation--open {
      max-height: 100%;
      transition: all 100ms cubic-bezier(0.86, 0, 0.07, 1); }

  .c-mobile-navigation--closed > .c-mobile-navigation__list {
    display: none; }

  .c-mobile-navigation--open > .c-mobile-navigation__list {
    display: block;
    position: relative;
    top: 50%;
    transform: translateY(-50%); } }
.c-logo {
  display: block;
  width: 90px;
  height: 40px;
  margin: 0 auto;
  background: url("/assets/images/logo.svg") no-repeat;
  background-size: contain;
  text-indent: -9999px; }

@media screen and (min-width: 60em) {
  .c-logo {
    width: 124px;
    height: 40px;
    background: url("/assets/images/logo.svg") no-repeat;
    background-size: contain;
    text-indent: -9999px; } }
.c-hero {
  padding-top: 320px;
  text-align: left;
  background-position: top right;
  background-size: 80%;
  background-repeat: no-repeat; }
  .c-hero .c-hero__text {
    z-index: 10;
    position: relative; }
  .c-hero .c-hero__title br {
    display: none; }

.c-hero__angle {
  position: absolute;
  width: 500px;
  height: 500px;
  background-image: url(/assets/images/triangle-background.png);
  background-position: left center;
  background-size: contain;
  background-repeat: no-repeat;
  left: 0;
  bottom: -60%;
  z-index: 0; }

.c-hero__image {
  display: none; }

@media screen and (min-width: 60em) {
  .c-hero {
    background-position: center right;
    background-size: contain;
    margin-top: 80px;
    margin-bottom: 80px;
    text-align: left; }

  .c-hero__angle {
    bottom: -120%;
    z-index: 0; }

  .c-hero__subtitle {
    padding: 0 28% 0 0;
    margin-bottom: 64px; }
    .c-hero__subtitle > p {
      font-size: 1.333rem; }

  .c-hero__text {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 66.6666666667% - 24px - 16px );
    margin: 0 0 0 24px;
    -ms-flex: 2;
        flex: 2;
    -ms-flex-item-align: start;
        align-self: flex-start; }

  .c-hero__title br {
    display: block; } }
@media screen and (min-width: 80em) {
  .c-hero__subtitle {
    padding: 0; } }
.c-intro-block {
  margin-top: 80px;
  text-align: left;
  position: relative; }

.c-intro-block__title {
  color: #FFFFFF;
  z-index: 10; }
  .c-intro-block__title span {
    color: #4F3DF3; }
  .c-intro-block__title i {
    opacity: 0.2; }
    .c-intro-block__title i.hidden {
      opacity: 0; }

@media screen and (min-width: 60em) {
  .c-intro-block {
    margin-top: 160px;
    margin-bottom: 80px; }

  .c-intro-block__title {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 100% - 24px - 24px );
    margin: 0 0 0 24px; } }
.c-centered-block {
  background: linear-gradient(180deg, #F0F1F4 0%, rgba(255, 155, 255, 0) 100%);
  padding: 80px 24px 80px 24px;
  text-align: center;
  position: relative;
  z-index: 10; }

.c-centered-block--light {
  background: transparent; }

.c-centered-block__title {
  color: #161C2D;
  z-index: 10;
  margin-bottom: 32px; }

.c-centered-block__subtitle {
  color: #C7C6CD;
  display: block;
  z-index: 10;
  margin-bottom: 16px; }

.c-centered-block__text {
  color: #6A687B;
  z-index: 10;
  margin-bottom: 64px; }

@media screen and (min-width: 60em) {
  .c-centered-block {
    padding: 160px 24px 0 24px; }

  .c-centered-block__title {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 25% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 50% - 24px - 12px );
    margin-bottom: 32px; }

  .c-centered-block__subtitle {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 16.6666666667% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 66.6666666667% - 24px - 16px );
    margin-bottom: 16px; }

  .c-centered-block__text {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 16.6666666667% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 66.6666666667% - 24px - 16px );
    margin-bottom: 64px; }

  .c-centered-block--small-image .c-centered-block__image {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 25% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 50% - 24px - 12px ); } }
.c-illustrated-description-block {
  position: relative;
  text-align: center;
  margin: 0 auto;
  z-index: 10;
  padding: 24px;
  margin-top: 320px; }

.c-illustrated-description-block__content {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-flow: column;
      flex-flow: column; }

.c-illustrated-description-block__text {
  -ms-flex-order: 2;
      order: 2; }

.c-illustrated-description-block__figure {
  -ms-flex-order: 1;
      order: 1;
  position: absolute;
  right: 0;
  height: 100%; }

.c-illustrated-description-block__image {
  height: 100%;
  width: 100%;
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center; }

.c-illustrated-description-block__link {
  color: #FFFFFF;
  font-weight: 500;
  font-family: Apercu-Mono;
  background: url(/assets/images/arrow.svg);
  background-repeat: no-repeat;
  background-size: 12px;
  background-position: 8px 6px;
  padding-left: 32px;
  padding-bottom: 8px;
  border-bottom: 1px solid #4F3DF3; }
  .c-illustrated-description-block__link:hover {
    color: #4F3DF3; }

@media screen and (min-width: 60em) {
  .c-illustrated-description-block {
    text-align: left; }

  .c-illustrated-description-block__content {
    -ms-flex-flow: row;
        flex-flow: row;
    -ms-flex-align: center;
        align-items: center; }

  .c-illustrated-description-block__text {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 8.3333333333% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 33.3333333333% - 24px - 8px );
    padding-top: 160px;
    padding-bottom: 160px;
    -ms-flex-order: 1;
        order: 1; }

  .c-illustrated-description-block__figure {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 8.3333333333% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 50% - 24px - 12px );
    height: 100%;
    -ms-flex-order: 2;
        order: 2; }

  .c-illustrated-description-block__image {
    position: absolute;
    margin-top: 0;
    z-index: 1; }
    .c-illustrated-description-block__image--back {
      height: 85%;
      z-index: 0;
      right: 0;
      margin: 0;
      margin-top: -100px;
      left: -30px; } }
.c-illustrated-description-block--inverted .c-illustrated-description-block__figure {
  left: 0;
  right: auto; }
.c-illustrated-description-block--inverted .c-illustrated-description-block__image {
  margin-left: auto;
  margin-right: -50px; }
  .c-illustrated-description-block--inverted .c-illustrated-description-block__image--back {
    margin-left: 50px;
    margin-top: -50px; }

@media screen and (min-width: 60em) {
  .c-illustrated-description-block--inverted .c-illustrated-description-block__figure {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 41.6666666667% - 24px - 10px );
    margin: 0 0 0 24px;
    margin-left: 0; }
  .c-illustrated-description-block--inverted .c-illustrated-description-block__image {
    position: absolute;
    left: 0;
    margin: 0; }
    .c-illustrated-description-block--inverted .c-illustrated-description-block__image--left {
      background-position: left center; }
    .c-illustrated-description-block--inverted .c-illustrated-description-block__image--back {
      height: 100%;
      margin-left: 100px;
      margin-top: -100px; }
  .c-illustrated-description-block--inverted .c-illustrated-description-block__text {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 50% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 33.3333333333% - 24px - 8px );
    padding-top: 112px;
    padding-bottom: 112px; } }
.c-illustrated-description-block-double {
  position: relative;
  z-index: 10;
  text-align: center;
  margin: 0 auto; }

.c-illustrated-description-block-double__image {
  margin-bottom: 32px; }

.c-illustrated-description-block-double:nth-child(2) {
  padding-top: 0; }

@media screen and (min-width: 60em) {
  .c-illustrated-description-block-double {
    text-align: left;
    margin-bottom: 32px;
    margin-top: 32px; }

  .c-illustrated-description-block-double__wrapper {
    margin: 0 auto; }

  .c-illustrated-description-block-double__content {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 8.3333333333% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 33.3333333333% - 24px - 8px ); }

  .c-illustrated-description-block-double__content:nth-child(2) {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 16.6666666667% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 33.3333333333% - 24px - 8px ); }

  .c-illustrated-description-block-double__text {
    position: relative; }

  .c-illustrated-description-block-double__image {
    display: block;
    margin-top: 0;
    margin-bottom: 32px; } }
.c-illustrated-description-block-double--boxed {
  position: relative;
  z-index: 10;
  margin-bottom: 32px; }
  .c-illustrated-description-block-double--boxed .c-illustrated-description-block-double__content {
    background: white;
    border-radius: 8px;
    box-shadow: 0 20px 20px 0 rgba(106, 104, 123, 0.3);
    margin-bottom: 24px; }
  .c-illustrated-description-block-double--boxed .c-illustrated-description-block-double__image {
    margin-top: 0;
    margin-bottom: 0; }
  .c-illustrated-description-block-double--boxed .c-illustrated-description-block-double__text {
    position: relative;
    padding: 24px;
    padding-top: 80px;
    text-align: center; }
  .c-illustrated-description-block-double--boxed .c-illustrated-description-block-double__icon {
    display: inline-block;
    width: 90px;
    height: 90px;
    position: absolute;
    top: -45px;
    left: 50%;
    margin-left: -45px; }

@media screen and (min-width: 60em) {
  .c-illustrated-description-block-double--boxed .c-illustrated-description-block-double__content {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 41.6666666667% - 24px - 10px );
    margin: 0 0 0 24px;
    margin-left: 20px; }
  .c-illustrated-description-block-double--boxed .c-illustrated-description-block-double__text {
    padding: 64px;
    padding-top: 80px; }
  .c-illustrated-description-block-double--boxed .c-illustrated-description-block-double__content:nth-child(2) {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 16.6666666667% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 41.6666666667% - 24px - 10px ); } }
.c-illustrated-description-block-triple {
  text-align: center;
  margin: 0 auto;
  z-index: 10;
  position: relative; }

.c-illustrated-description-block-triple__image {
  margin-top: 32px; }

@media screen and (min-width: 60em) {
  .c-illustrated-description-block-triple {
    overflow: hidden;
    text-align: left;
    margin-top: 160px; }

  .c-illustrated-description-block-triple__wrapper {
    margin: 0 auto;
    overflow: hidden; }

  .c-illustrated-description-block-triple__content {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 25% - 24px - 6px );
    margin: 0 0 0 24px; }

  .c-illustrated-description-block-triple__content:nth-child(2),
  .c-illustrated-description-block-triple__content:nth-child(3) {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 8.3333333333% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 25% - 24px - 6px ); }

  .c-illustrated-description-block-triple__image {
    display: block;
    margin-top: 0;
    margin-bottom: 32px; } }
.c-prefooter {
  position: relative;
  padding: 32px; }

.c-prefooter__big-triangle {
  display: none;
  position: absolute;
  width: 670px;
  height: 670px;
  background-image: url(/assets/images/prefooter-big-triangle.svg);
  background-position: right center;
  background-size: contain;
  background-repeat: no-repeat;
  right: 0;
  top: -10%;
  z-index: 0; }

.c-prefooter__wrapper {
  position: relative;
  padding: 32px;
  background-color: #161C2D;
  border-radius: 8px;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
      align-items: center;
  -ms-flex-pack: justify;
      justify-content: space-between;
  -ms-flex-direction: column;
      flex-direction: column;
  box-shadow: 0px 10px 40px 0px rgba(106, 104, 123, 0.4); }

.c-prefooter__wrapper__small-triangle {
  position: absolute;
  width: 70px;
  height: 70px;
  background-image: url(/assets/images/prefooter-small-triangle.svg);
  background-position: left center;
  background-size: contain;
  background-repeat: no-repeat;
  left: 5%;
  top: -15%; }

.c-prefooter__title {
  /*
    Check if $colSpan is a valid integer number then process the parameters
    passed to the grid() mixin.
  */
  box-sizing: border-box;
  /*
    Check if $align is set to left (default) and make element floating
    to the left
  */
  float: left;
  /*
    If $grid-use-gutters is set to false (true by default) set the
    element width based on the $initColWidth process result.
  */
  /*
    Check if not 0 $offset is passed as argument and then if $gutter is 0
    set the left (based on direction) margin as offset.
  */
  /*
    If $grid-use-gutters is true then calculate the default new width and left-margin
    based on $columns and $colSpan
  */
  /*
    Check if the $gutter have a % unit
  */
  width: calc( 100% - 24px - 24px );
  margin: 0 0 0 24px;
  color: white;
  margin-bottom: 32px;
  -ms-flex-item-align: start;
      align-self: flex-start; }

.c-prefooter__button {
  width: 100%;
  text-align: center;
  margin-left: auto; }

@media screen and (min-width: 30em) {
  .c-prefooter__button {
    width: auto; } }
@media screen and (min-width: 60em) {
  .c-prefooter {
    background-size: contain;
    background-position: top right; }

  .c-prefooter__wrapper {
    -ms-flex-direction: row;
        flex-direction: row;
    padding: 64px;
    margin-top: 160px;
    margin-bottom: 80px; }

  .c-prefooter__wrapper__small-triangle {
    top: -25%; }

  .c-prefooter__big-triangle {
    display: block; }

  .c-prefooter__title {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 50% - 24px - 12px );
    margin: 0 0 0 24px;
    margin-bottom: 0; }

  .c-prefooter__button {
    width: auto; } }
.c-footer {
  position: relative;
  z-index: 10;
  padding-top: 240px;
  padding-bottom: 80px;
  text-align: left; }

.c-footer__brand {
  /*
    Check if $colSpan is a valid integer number then process the parameters
    passed to the grid() mixin.
  */
  box-sizing: border-box;
  /*
    Check if $align is set to left (default) and make element floating
    to the left
  */
  float: left;
  /*
    If $grid-use-gutters is set to false (true by default) set the
    element width based on the $initColWidth process result.
  */
  /*
    Check if not 0 $offset is passed as argument and then if $gutter is 0
    set the left (based on direction) margin as offset.
  */
  /*
    If $grid-use-gutters is true then calculate the default new width and left-margin
    based on $columns and $colSpan
  */
  /*
    Check if the $gutter have a % unit
  */
  width: calc( 25% - 24px - 6px );
  margin: 0 0 0 24px; }
  .c-footer__brand p {
    color: #C7C6CD; }

.c-footer__logo {
  display: block;
  width: 160px;
  height: 40px;
  background: url("images/logo.svg") no-repeat;
  background-size: contain;
  text-indent: -9999px;
  margin-bottom: 48px; }

.c-footer__bottom {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
      align-items: center; }

.c-footer__credits {
  /*
    Check if $colSpan is a valid integer number then process the parameters
    passed to the grid() mixin.
  */
  box-sizing: border-box;
  /*
    Check if $align is set to left (default) and make element floating
    to the left
  */
  float: left;
  /*
    If $grid-use-gutters is set to false (true by default) set the
    element width based on the $initColWidth process result.
  */
  /*
    Check if not 0 $offset is passed as argument and then if $gutter is 0
    set the left (based on direction) margin as offset.
  */
  /*
    If $grid-use-gutters is true then calculate the default new width and left-margin
    based on $columns and $colSpan
  */
  /*
    Check if the $gutter have a % unit
  */
  width: calc( 50% - 24px - 12px );
  margin: 0 0 0 24px;
  padding: 0;
  text-align: left; }
  .c-footer__credits p {
    color: #6A687B;
    font-size: 0.8889rem;
    font-family: Apercu-Mono;
    margin: 0; }

.c-footer__social {
  /*
    Check if $colSpan is a valid integer number then process the parameters
    passed to the grid() mixin.
  */
  box-sizing: border-box;
  /*
    Check if $align is set to left (default) and make element floating
    to the left
  */
  float: left;
  /*
    If $grid-use-gutters is set to false (true by default) set the
    element width based on the $initColWidth process result.
  */
  /*
    Check if not 0 $offset is passed as argument and then if $gutter is 0
    set the left (based on direction) margin as offset.
  */
  /*
    If $grid-use-gutters is true then calculate the default new width and left-margin
    based on $columns and $colSpan
  */
  /*
    Check if the $gutter have a % unit
  */
  width: calc( 50% - 24px - 12px );
  margin: 0 0 0 24px;
  margin: 40px 0 0 0;
  text-align: right;
  -ms-flex-align: center;
      align-items: center;
  margin: 0; }

.c-footer__social-facebook,
.c-footer__social-twitter,
.c-footer__social-instagram {
  display: inline-block;
  min-height: 60px;
  min-width: 60px;
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center; }

.c-footer__social-facebook {
  background-image: url("images/footer-social-facebook.svg");
  margin-right: 8px; }

.c-footer__social-twitter {
  background-image: url("images/footer-social-twitter.svg");
  margin-right: 8px; }

.c-footer__social-instagram {
  background-image: url("images/footer-social-instagram.svg");
  margin-right: 8px; }

.c-footer__copyright {
  margin-top: 16px;
  color: #6A687B;
  padding: 16px 0;
  text-align: left;
  font-size: 0.7222rem;
  font-weight: 400;
  font-family: Apercu-Mono;
  /*
    Check if $colSpan is a valid integer number then process the parameters
    passed to the grid() mixin.
  */
  box-sizing: border-box;
  /*
    Check if $align is set to left (default) and make element floating
    to the left
  */
  float: left;
  /*
    If $grid-use-gutters is set to false (true by default) set the
    element width based on the $initColWidth process result.
  */
  /*
    Check if not 0 $offset is passed as argument and then if $gutter is 0
    set the left (based on direction) margin as offset.
  */
  /*
    If $grid-use-gutters is true then calculate the default new width and left-margin
    based on $columns and $colSpan
  */
  /*
    Check if the $gutter have a % unit
  */
  width: calc( 58.3333333333% - 24px - 14px );
  margin: 0 0 0 24px; }

.c-footer__contact {
  /*
    Check if $colSpan is a valid integer number then process the parameters
    passed to the grid() mixin.
  */
  box-sizing: border-box;
  /*
    Check if $align is set to left (default) and make element floating
    to the left
  */
  float: left;
  /*
    If $grid-use-gutters is set to false (true by default) set the
    element width based on the $initColWidth process result.
  */
  /*
    Check if not 0 $offset is passed as argument and then if $gutter is 0
    set the left (based on direction) margin as offset.
  */
  /*
    If $grid-use-gutters is true then calculate the default new width and left-margin
    based on $columns and $colSpan
  */
  /*
    Check if the $gutter have a % unit
  */
  width: calc( 41.6666666667% - 24px - 10px );
  margin: 0 0 0 24px;
  text-align: right; }
  .c-footer__contact a {
    color: #FFFFFF;
    font-weight: 200;
    font-size: 1.667rem;
    background: url(/assets/images/arrow.svg);
    background-repeat: no-repeat;
    background-size: 22px;
    background-position: 8px 7px;
    padding-left: 40px;
    padding-bottom: 8px; }
  .c-footer__contact:hover {
    color: #4F3DF3; }

.c-footer__navigation {
  /*
    Check if $colSpan is a valid integer number then process the parameters
    passed to the grid() mixin.
  */
  box-sizing: border-box;
  /*
    Check if $align is set to left (default) and make element floating
    to the left
  */
  float: left;
  /*
    If $grid-use-gutters is set to false (true by default) set the
    element width based on the $initColWidth process result.
  */
  /*
    Check if not 0 $offset is passed as argument and then if $gutter is 0
    set the left (based on direction) margin as offset.
  */
  /*
    If $grid-use-gutters is true then calculate the default new width and left-margin
    based on $columns and $colSpan
  */
  /*
    Check if the $gutter have a % unit
  */
  width: calc( 25% - 24px - 6px );
  margin: 0 0 0 24px;
  display: inline-block; }

.c-footer__navigation__list {
  padding: 0;
  margin: 0; }

.c-footer__navigation__list-item {
  font-size: 0.8889rem;
  font-weight: 400;
  list-style: none;
  padding: 8px 40px 8px 0; }
  .c-footer__navigation__list-item--active {
    font-weight: 500;
    color: #4F3DF3; }

.c-footer__navigation__link {
  font-size: 0.8889rem;
  color: #6A687B; }

@media screen and (min-width: 60em) {
  .c-footer__navigation__list-item {
    -ms-flex-item-align: start;
        align-self: flex-start; } }
.c-cookie-block {
  display: -ms-flexbox;
  display: flex;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  padding: 16px;
  background: #F0F1F4;
  z-index: 99999;
  position: fixed; }
  .c-cookie-block p {
    font-size: 0.775rem;
    margin: auto;
    width: 95%;
    float: left; }

.c-cookie-block__wrapper {
  display: -ms-flexbox;
  display: flex; }

.c-cookie-block--closed {
  display: none;
  margin-top: -80px;
  transition: all 0.3s ease 0s; }

.c-cookie-block__btn-close {
  background-image: url("/assets/images/modal-close-button.svg");
  background-size: cover;
  background-color: transparent;
  width: 17px;
  height: 16px;
  margin: 5px;
  position: relative;
  cursor: pointer; }

@media screen and (min-width: 60em) {
  .c-cookie-block {
    position: fixed;
    bottom: auto;
    top: 0; }

  .c-cookie-block__btn-close {
    width: 20px;
    height: 20px;
    margin: 16px; }

  .c-cookie-block__wrapper {
    width: 1220px;
    padding: 0 16px;
    min-width: 915px;
    position: relative;
    display: -ms-flexbox;
    display: flex;
    margin: 0 auto; } }
.c-page-content {
  margin: 0 auto;
  padding: 40px 24px; }
  .c-page-content .c-page-content__text__item h5 {
    margin-bottom: 40px; }
  .c-page-content .c-page-content__text__item p {
    margin-bottom: 128px; }
  .c-page-content--notitle .c-page-content__text__item h5 {
    margin-bottom: 56px; }
  .c-page-content--notitle .c-page-content__text__item p {
    font-size: 1.667rem; }

.c-big-link {
  /*
    Check if $colSpan is a valid integer number then process the parameters
    passed to the grid() mixin.
  */
  box-sizing: border-box;
  /*
    Check if $align is set to left (default) and make element floating
    to the left
  */
  float: left;
  /*
    If $grid-use-gutters is set to false (true by default) set the
    element width based on the $initColWidth process result.
  */
  /*
    Check if not 0 $offset is passed as argument and then if $gutter is 0
    set the left (based on direction) margin as offset.
  */
  margin: 0 24px 0 calc( 66.6666666667% + 24px );
  /*
    If $grid-use-gutters is true then calculate the default new width and left-margin
    based on $columns and $colSpan
  */
  /*
    Check if the $gutter have a % unit
  */
  width: calc( 33.3333333333% - 24px - 8px );
  text-align: right; }
  .c-big-link a {
    color: #FFFFFF;
    font-weight: 200;
    font-size: 3.556rem;
    background: url(/assets/images/arrow.svg);
    background-repeat: no-repeat;
    background-size: 46px;
    background-position: 8px 17px;
    padding-left: 72px;
    padding-bottom: 8px; }
  .c-big-link:hover {
    color: #4F3DF3; }

@media screen and (min-width: 60em) {
  .c-page-content {
    padding: 144px 0 112px 0; }

  .c-page-content__title {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 33.3333333333% - 24px - 8px );
    margin: 0 0 0 24px; }

  .c-page-content__text {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 16.6666666667% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 41.6666666667% - 24px - 10px ); }

  .c-page-content--notitle .c-page-content__text {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 33.3333333333% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 58.3333333333% - 24px - 14px ); } }
.c-modal-wrapper {
  position: fixed;
  z-index: 1000;
  width: 100%;
  height: 100%;
  top: 0;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
      align-items: center; }
  .c-modal-wrapper--closed .c-modal-overdrop {
    opacity: 0;
    transition: all 200ms cubic-bezier(0.86, 0, 0.07, 1); }
  .c-modal-wrapper--closed .c-modal {
    opacity: 0;
    transition: all 150ms cubic-bezier(0.86, 0, 0.07, 1); }
  .c-modal-wrapper--open .c-modal-overdrop {
    opacity: 0.8;
    transition: all 150ms cubic-bezier(0.86, 0, 0.07, 1); }
  .c-modal-wrapper--open .c-modal {
    opacity: 1;
    transition: all 200ms cubic-bezier(0.86, 0, 0.07, 1); }

.c-modal-overdrop {
  position: fixed;
  width: 100%;
  height: 100%;
  background-color: #161C2D;
  opacity: 0.8;
  z-index: 1000; }

.c-modal {
  z-index: 1001;
  opacity: 1;
  position: relative;
  background-color: #FFFFFF;
  border-radius: 8px;
  padding: 0 24px 0 24px;
  text-align: left;
  box-shadow: 0 30px 70px 0 rgba(51, 48, 74, 0.7); }

.c-modal__close-button {
  display: block;
  position: absolute;
  top: -20px;
  right: -20px;
  height: 40px;
  width: 40px;
  background-image: url(/assets/images/modal-close-button.svg);
  background-position: center center;
  background-size: contain;
  background-repeat: no-repeat; }

.c-modal--background {
  background-image: url(/assets/images/modal-background.svg);
  background-position: right bottom;
  background-size: 40%;
  background-repeat: no-repeat; }

.c-modal__title {
  color: #161C2D;
  z-index: 10; }

.c-modal-privacy {
  font-size: 0.8889rem;
  margin-top: 16px; }

.c-modal__subtitle {
  display: block;
  z-index: 10;
  margin-bottom: 16px;
  color: #C7C6CD; }

.c-fiesta {
  font-size: 3.556rem;
  text-align: center; }

@media screen and (min-width: 60em) {
  .c-modal {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    margin: 0 24px 0 calc( 25% + 24px );
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 50% - 24px - 12px );
    padding: 128px 64px; } }
/* Import Trumps */
.t-home-hero {
  padding: 0 24px 80px 24px;
  text-align: left;
  position: relative; }

.t-home-hero__content {
  position: relative;
  z-index: 10; }

.t-home-hero__title {
  margin-top: 0;
  margin-bottom: 32px; }
  .t-home-hero__title span {
    color: #4F3DF3; }
  .t-home-hero__title i {
    opacity: 0.2;
    transition: all 200ms cubic-bezier(0.86, 0, 0.07, 1); }
    .t-home-hero__title i.hidden {
      transition: all 200ms cubic-bezier(0.86, 0, 0.07, 1);
      opacity: 0; }

.t-home-hero__subtitle {
  display: block;
  margin: 0 auto; }

.t-home-hero__bg-img--right {
  display: none; }

@media screen and (min-width: 60em) {
  .t-home-hero {
    padding: 192px 0;
    padding-bottom: 400px; }

  .t-home-hero__content {
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 50% - 24px - 12px );
    margin: 0 0 0 24px; }

  .t-home-hero__bg-img {
    position: absolute;
    display: block;
    z-index: 0;
    right: 0;
    /*
      Check if $colSpan is a valid integer number then process the parameters
      passed to the grid() mixin.
    */
    box-sizing: border-box;
    /*
      Check if $align is set to left (default) and make element floating
      to the left
    */
    float: left;
    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    /*
      Check if not 0 $offset is passed as argument and then if $gutter is 0
      set the left (based on direction) margin as offset.
    */
    /*
      If $grid-use-gutters is true then calculate the default new width and left-margin
      based on $columns and $colSpan
    */
    /*
      Check if the $gutter have a % unit
    */
    width: calc( 50% - 24px - 12px );
    margin: 0 0 0 24px; } }
.c-language-switcher {
  display: none; }

@media screen and (min-width: 60em) {
  .c-language-switcher {
    display: block;
    margin: 0;
    padding: 8px 32px; }

  .c-language-switcher__lang {
    text-transform: uppercase;
    list-style: none;
    font-weight: 500; } }
.c-contacts {
  padding: 56px 24px 160px 24px; }

.c-contacts__header {
  width: 100%; }
  .c-contacts__header h1 {
    display: block;
    width: 100%;
    text-align: center;
    font-size: 2.75rem;
    font-weight: 500; }
  .c-contacts__header .subtitle {
    display: block;
    width: 100%;
    text-align: center;
    font-size: 1.375rem; }

.c-contacts__list {
  margin: 56px 0 0 0;
  padding: 0;
  border: 1px solid #F1F3F7;
  display: block; }

.c-contacts__list-item {
  margin: 0;
  padding: 5em;
  display: block;
  width: 100%; }
  .c-contacts__list-item--border-right {
    border-right: 1px solid #F1F3F7; }
  .c-contacts__list-item--border-left {
    border-left: 1px solid #F1F3F7; }

.c-contacts__list-icon {
  display: block;
  margin: 0 auto 40px auto; }

.c-contacts__list-description {
  display: block;
  text-align: center;
  width: 100%;
  font-size: 0.813rem;
  color: #F0F1F4; }
  .c-contacts__list-description--more-margin {
    margin-bottom: 16px; }

.c-contacts__list-contact {
  display: block;
  text-align: center;
  width: 100%;
  color: #6A687B; }

@media screen and (min-width: 60em) {
  .c-contacts {
    padding: 144px 0 160px 0; }

  .c-contacts__list {
    display: -ms-flexbox;
    display: flex; }

  .c-contacts__list-item {
    width: 33%; } }
.t-margin-bottom-none {
  margin-top: 0; }

.t-margin-top-x1 {
  margin-top: 8px; }

.t-margin-top-x2 {
  margin-top: 16px; }

.t-margin-top-x3 {
  margin-top: 24px; }

.t-margin-top-x4 {
  margin-top: 32px; }

.t-margin-top-x5 {
  margin-top: 40px; }

.t-margin-top-x6 {
  margin-top: 48px; }

.t-margin-top-x7 {
  margin-top: 56px; }

.t-margin-top-x8 {
  margin-top: 64px; }

.t-margin-top-x9 {
  margin-top: 72px; }

.t-margin-top-x10 {
  margin-top: 80px; }

.t-margin-top-x20 {
  margin-top: 160px; }

.t-margin-bottom-none {
  margin-bottom: 0; }

.t-margin-bottom-x1 {
  margin-bottom: 8px; }

.t-margin-bottom-x2 {
  margin-bottom: 16px; }

.t-margin-bottom-x3 {
  margin-bottom: 24px; }

.t-margin-bottom-x4 {
  margin-bottom: 32px; }

.t-margin-bottom-x5 {
  margin-bottom: 40px; }

.t-margin-bottom-x6 {
  margin-bottom: 48px; }

.t-margin-bottom-x7 {
  margin-bottom: 56px; }

.t-margin-bottom-x8 {
  margin-bottom: 64px; }

.t-margin-bottom-x9 {
  margin-bottom: 72px; }

.t-margin-bottom-x10 {
  margin-bottom: 80px; }

.t-margin-bottom-x20 {
  margin-bottom: 160px; }

/*!
 * animate.css -http://daneden.me/animate
 * Version - 3.5.1
 * Licensed under the MIT license - http://opensource.org/licenses/MIT
 *
 * Copyright (c) 2016 Daniel Eden
 */
.animated {
  animation-duration: 500ms;
  animation-fill-mode: both; }

.animated.infinite {
  animation-iteration-count: infinite; }

.animated.hinge {
  animation-duration: 2s; }

.animated.flipOutX,
.animated.flipOutY,
.animated.bounceIn,
.animated.bounceOut {
  animation-duration: .75s; }
@keyframes bounce {
  from, 20%, 53%, 80%, to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    transform: translate3d(0, 0, 0); }
  40%, 43% {
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    transform: translate3d(0, -30px, 0); }
  70% {
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    transform: translate3d(0, -15px, 0); }
  90% {
    transform: translate3d(0, -4px, 0); } }
.bounce {
  animation-name: bounce;
  transform-origin: center bottom; }
@keyframes flash {
  from, 50%, to {
    opacity: 1; }
  25%, 75% {
    opacity: 0; } }
.flash {
  animation-name: flash; }

/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */
@keyframes pulse {
  from {
    transform: scale3d(1, 1, 1); }
  50% {
    transform: scale3d(1.05, 1.05, 1.05); }
  to {
    transform: scale3d(1, 1, 1); } }
.pulse {
  animation-name: pulse; }
@keyframes rubberBand {
  from {
    transform: scale3d(1, 1, 1); }
  30% {
    transform: scale3d(1.25, 0.75, 1); }
  40% {
    transform: scale3d(0.75, 1.25, 1); }
  50% {
    transform: scale3d(1.15, 0.85, 1); }
  65% {
    transform: scale3d(0.95, 1.05, 1); }
  75% {
    transform: scale3d(1.05, 0.95, 1); }
  to {
    transform: scale3d(1, 1, 1); } }
.rubberBand {
  animation-name: rubberBand; }
@keyframes shake {
  from, to {
    transform: translate3d(0, 0, 0); }
  10%, 30%, 50%, 70%, 90% {
    transform: translate3d(-10px, 0, 0); }
  20%, 40%, 60%, 80% {
    transform: translate3d(10px, 0, 0); } }
.shake {
  animation-name: shake; }
@keyframes headShake {
  0% {
    transform: translateX(0); }
  6.5% {
    transform: translateX(-6px) rotateY(-9deg); }
  18.5% {
    transform: translateX(5px) rotateY(7deg); }
  31.5% {
    transform: translateX(-3px) rotateY(-5deg); }
  43.5% {
    transform: translateX(2px) rotateY(3deg); }
  50% {
    transform: translateX(0); } }
.headShake {
  animation-timing-function: ease-in-out;
  animation-name: headShake; }
@keyframes swing {
  20% {
    transform: rotate3d(0, 0, 1, 15deg); }
  40% {
    transform: rotate3d(0, 0, 1, -10deg); }
  60% {
    transform: rotate3d(0, 0, 1, 5deg); }
  80% {
    transform: rotate3d(0, 0, 1, -5deg); }
  to {
    transform: rotate3d(0, 0, 1, 0deg); } }
.swing {
  transform-origin: top center;
  animation-name: swing; }
@keyframes tada {
  from {
    transform: scale3d(1, 1, 1); }
  10%, 20% {
    transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg); }
  30%, 50%, 70%, 90% {
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg); }
  40%, 60%, 80% {
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg); }
  to {
    transform: scale3d(1, 1, 1); } }
.tada {
  animation-name: tada; }

/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */
@keyframes wobble {
  from {
    transform: none; }
  15% {
    transform: translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg); }
  30% {
    transform: translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg); }
  45% {
    transform: translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg); }
  60% {
    transform: translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg); }
  75% {
    transform: translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg); }
  to {
    transform: none; } }
.wobble {
  animation-name: wobble; }
@keyframes jello {
  from, 11.1%, to {
    transform: none; }
  22.2% {
    transform: skewX(-12.5deg) skewY(-12.5deg); }
  33.3% {
    transform: skewX(6.25deg) skewY(6.25deg); }
  44.4% {
    transform: skewX(-3.125deg) skewY(-3.125deg); }
  55.5% {
    transform: skewX(1.5625deg) skewY(1.5625deg); }
  66.6% {
    transform: skewX(-0.78125deg) skewY(-0.78125deg); }
  77.7% {
    transform: skewX(0.390625deg) skewY(0.390625deg); }
  88.8% {
    transform: skewX(-0.1953125deg) skewY(-0.1953125deg); } }
.jello {
  animation-name: jello;
  transform-origin: center; }
@keyframes bounceIn {
  from, 20%, 40%, 60%, 80%, to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }
  0% {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3); }
  20% {
    transform: scale3d(1.1, 1.1, 1.1); }
  40% {
    transform: scale3d(0.9, 0.9, 0.9); }
  60% {
    opacity: 1;
    transform: scale3d(1.03, 1.03, 1.03); }
  80% {
    transform: scale3d(0.97, 0.97, 0.97); }
  to {
    opacity: 1;
    transform: scale3d(1, 1, 1); } }
.bounceIn {
  animation-name: bounceIn; }
@keyframes bounceInDown {
  from, 60%, 75%, 90%, to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }
  0% {
    opacity: 0;
    transform: translate3d(0, -3000px, 0); }
  60% {
    opacity: 1;
    transform: translate3d(0, 25px, 0); }
  75% {
    transform: translate3d(0, -10px, 0); }
  90% {
    transform: translate3d(0, 5px, 0); }
  to {
    transform: none; } }
.bounceInDown {
  animation-name: bounceInDown; }
@keyframes bounceInLeft {
  from, 60%, 75%, 90%, to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }
  0% {
    opacity: 0;
    transform: translate3d(-3000px, 0, 0); }
  60% {
    opacity: 1;
    transform: translate3d(25px, 0, 0); }
  75% {
    transform: translate3d(-10px, 0, 0); }
  90% {
    transform: translate3d(5px, 0, 0); }
  to {
    transform: none; } }
.bounceInLeft {
  animation-name: bounceInLeft; }
@keyframes bounceInRight {
  from, 60%, 75%, 90%, to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }
  from {
    opacity: 0;
    transform: translate3d(3000px, 0, 0); }
  60% {
    opacity: 1;
    transform: translate3d(-25px, 0, 0); }
  75% {
    transform: translate3d(10px, 0, 0); }
  90% {
    transform: translate3d(-5px, 0, 0); }
  to {
    transform: none; } }
.bounceInRight {
  animation-name: bounceInRight; }
@keyframes bounceInUp {
  from, 60%, 75%, 90%, to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }
  from {
    opacity: 0;
    transform: translate3d(0, 3000px, 0); }
  60% {
    opacity: 1;
    transform: translate3d(0, -20px, 0); }
  75% {
    transform: translate3d(0, 10px, 0); }
  90% {
    transform: translate3d(0, -5px, 0); }
  to {
    transform: translate3d(0, 0, 0); } }
.bounceInUp {
  animation-name: bounceInUp; }
@keyframes bounceOut {
  20% {
    transform: scale3d(0.9, 0.9, 0.9); }
  50%, 55% {
    opacity: 1;
    transform: scale3d(1.1, 1.1, 1.1); }
  to {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3); } }
.bounceOut {
  animation-name: bounceOut; }
@keyframes bounceOutDown {
  20% {
    transform: translate3d(0, 10px, 0); }
  40%, 45% {
    opacity: 1;
    transform: translate3d(0, -20px, 0); }
  to {
    opacity: 0;
    transform: translate3d(0, 2000px, 0); } }
.bounceOutDown {
  animation-name: bounceOutDown; }
@keyframes bounceOutLeft {
  20% {
    opacity: 1;
    transform: translate3d(20px, 0, 0); }
  to {
    opacity: 0;
    transform: translate3d(-2000px, 0, 0); } }
.bounceOutLeft {
  animation-name: bounceOutLeft; }
@keyframes bounceOutRight {
  20% {
    opacity: 1;
    transform: translate3d(-20px, 0, 0); }
  to {
    opacity: 0;
    transform: translate3d(2000px, 0, 0); } }
.bounceOutRight {
  animation-name: bounceOutRight; }
@keyframes bounceOutUp {
  20% {
    transform: translate3d(0, -10px, 0); }
  40%, 45% {
    opacity: 1;
    transform: translate3d(0, 20px, 0); }
  to {
    opacity: 0;
    transform: translate3d(0, -2000px, 0); } }
.bounceOutUp {
  animation-name: bounceOutUp; }
@keyframes fadeIn {
  from {
    opacity: 0; }
  to {
    opacity: 1; } }
.fadeIn {
  animation-name: fadeIn; }
@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translate3d(0, -100%, 0); }
  to {
    opacity: 1;
    transform: none; } }
.fadeInDown {
  animation-name: fadeInDown; }
@keyframes fadeInDownBig {
  from {
    opacity: 0;
    transform: translate3d(0, -2000px, 0); }
  to {
    opacity: 1;
    transform: none; } }
.fadeInDownBig {
  animation-name: fadeInDownBig; }
@keyframes fadeInLeft {
  from {
    opacity: 0;
    transform: translate3d(-100%, 0, 0); }
  to {
    opacity: 1;
    transform: none; } }
.fadeInLeft {
  animation-name: fadeInLeft; }
@keyframes fadeInLeftBig {
  from {
    opacity: 0;
    transform: translate3d(-2000px, 0, 0); }
  to {
    opacity: 1;
    transform: none; } }
.fadeInLeftBig {
  animation-name: fadeInLeftBig; }
@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translate3d(100%, 0, 0); }
  to {
    opacity: 1;
    transform: none; } }
.fadeInRight {
  animation-name: fadeInRight; }
@keyframes fadeInRightBig {
  from {
    opacity: 0;
    transform: translate3d(2000px, 0, 0); }
  to {
    opacity: 1;
    transform: none; } }
.fadeInRightBig {
  animation-name: fadeInRightBig; }
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translate3d(0, 100%, 0); }
  to {
    opacity: 1;
    transform: none; } }
.fadeInUp {
  animation-name: fadeInUp; }
@keyframes fadeInUpBig {
  from {
    opacity: 0;
    transform: translate3d(0, 2000px, 0); }
  to {
    opacity: 1;
    transform: none; } }
.fadeInUpBig {
  animation-name: fadeInUpBig; }
@keyframes fadeOut {
  from {
    opacity: 1; }
  to {
    opacity: 0; } }
.fadeOut {
  animation-name: fadeOut; }
@keyframes fadeOutDown {
  from {
    opacity: 1; }
  to {
    opacity: 0;
    transform: translate3d(0, 100%, 0); } }
.fadeOutDown {
  animation-name: fadeOutDown; }
@keyframes fadeOutDownBig {
  from {
    opacity: 1; }
  to {
    opacity: 0;
    transform: translate3d(0, 2000px, 0); } }
.fadeOutDownBig {
  animation-name: fadeOutDownBig; }
@keyframes fadeOutLeft {
  from {
    opacity: 1; }
  to {
    opacity: 0;
    transform: translate3d(-100%, 0, 0); } }
.fadeOutLeft {
  animation-name: fadeOutLeft; }
@keyframes fadeOutLeftBig {
  from {
    opacity: 1; }
  to {
    opacity: 0;
    transform: translate3d(-2000px, 0, 0); } }
.fadeOutLeftBig {
  animation-name: fadeOutLeftBig; }
@keyframes fadeOutRight {
  from {
    opacity: 1; }
  to {
    opacity: 0;
    transform: translate3d(100%, 0, 0); } }
.fadeOutRight {
  animation-name: fadeOutRight; }
@keyframes fadeOutRightBig {
  from {
    opacity: 1; }
  to {
    opacity: 0;
    transform: translate3d(2000px, 0, 0); } }
.fadeOutRightBig {
  animation-name: fadeOutRightBig; }
@keyframes fadeOutUp {
  from {
    opacity: 1; }
  to {
    opacity: 0;
    transform: translate3d(0, -100%, 0); } }
.fadeOutUp {
  animation-name: fadeOutUp; }
@keyframes fadeOutUpBig {
  from {
    opacity: 1; }
  to {
    opacity: 0;
    transform: translate3d(0, -2000px, 0); } }
.fadeOutUpBig {
  animation-name: fadeOutUpBig; }
@keyframes flip {
  from {
    transform: perspective(400px) rotate3d(0, 1, 0, -360deg);
    animation-timing-function: ease-out; }
  40% {
    transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -190deg);
    animation-timing-function: ease-out; }
  50% {
    transform: perspective(400px) translate3d(0, 0, 150px) rotate3d(0, 1, 0, -170deg);
    animation-timing-function: ease-in; }
  80% {
    transform: perspective(400px) scale3d(0.95, 0.95, 0.95);
    animation-timing-function: ease-in; }
  to {
    transform: perspective(400px);
    animation-timing-function: ease-in; } }
.animated.flip {
  -webkit-backface-visibility: visible;
  backface-visibility: visible;
  animation-name: flip; }
@keyframes flipInX {
  from {
    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    animation-timing-function: ease-in;
    opacity: 0; }
  40% {
    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    animation-timing-function: ease-in; }
  60% {
    transform: perspective(400px) rotate3d(1, 0, 0, 10deg);
    opacity: 1; }
  80% {
    transform: perspective(400px) rotate3d(1, 0, 0, -5deg); }
  to {
    transform: perspective(400px); } }
.flipInX {
  -webkit-backface-visibility: visible !important;
  backface-visibility: visible !important;
  animation-name: flipInX; }
@keyframes flipInY {
  from {
    transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
    animation-timing-function: ease-in;
    opacity: 0; }
  40% {
    transform: perspective(400px) rotate3d(0, 1, 0, -20deg);
    animation-timing-function: ease-in; }
  60% {
    transform: perspective(400px) rotate3d(0, 1, 0, 10deg);
    opacity: 1; }
  80% {
    transform: perspective(400px) rotate3d(0, 1, 0, -5deg); }
  to {
    transform: perspective(400px); } }
.flipInY {
  -webkit-backface-visibility: visible !important;
  backface-visibility: visible !important;
  animation-name: flipInY; }
@keyframes flipOutX {
  from {
    transform: perspective(400px); }
  30% {
    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    opacity: 1; }
  to {
    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    opacity: 0; } }
.flipOutX {
  animation-name: flipOutX;
  -webkit-backface-visibility: visible !important;
  backface-visibility: visible !important; }
@keyframes flipOutY {
  from {
    transform: perspective(400px); }
  30% {
    transform: perspective(400px) rotate3d(0, 1, 0, -15deg);
    opacity: 1; }
  to {
    transform: perspective(400px) rotate3d(0, 1, 0, 90deg);
    opacity: 0; } }
.flipOutY {
  -webkit-backface-visibility: visible !important;
  backface-visibility: visible !important;
  animation-name: flipOutY; }
@keyframes lightSpeedIn {
  from {
    transform: translate3d(100%, 0, 0) skewX(-30deg);
    opacity: 0; }
  60% {
    transform: skewX(20deg);
    opacity: 1; }
  80% {
    transform: skewX(-5deg);
    opacity: 1; }
  to {
    transform: none;
    opacity: 1; } }
.lightSpeedIn {
  animation-name: lightSpeedIn;
  animation-timing-function: ease-out; }
@keyframes lightSpeedOut {
  from {
    opacity: 1; }
  to {
    transform: translate3d(100%, 0, 0) skewX(30deg);
    opacity: 0; } }
.lightSpeedOut {
  animation-name: lightSpeedOut;
  animation-timing-function: ease-in; }
@keyframes rotateIn {
  from {
    transform-origin: center;
    transform: rotate3d(0, 0, 1, -200deg);
    opacity: 0; }
  to {
    transform-origin: center;
    transform: none;
    opacity: 1; } }
.rotateIn {
  animation-name: rotateIn; }
@keyframes rotateInDownLeft {
  from {
    transform-origin: left bottom;
    transform: rotate3d(0, 0, 1, -45deg);
    opacity: 0; }
  to {
    transform-origin: left bottom;
    transform: none;
    opacity: 1; } }
.rotateInDownLeft {
  animation-name: rotateInDownLeft; }
@keyframes rotateInDownRight {
  from {
    transform-origin: right bottom;
    transform: rotate3d(0, 0, 1, 45deg);
    opacity: 0; }
  to {
    transform-origin: right bottom;
    transform: none;
    opacity: 1; } }
.rotateInDownRight {
  animation-name: rotateInDownRight; }
@keyframes rotateInUpLeft {
  from {
    transform-origin: left bottom;
    transform: rotate3d(0, 0, 1, 45deg);
    opacity: 0; }
  to {
    transform-origin: left bottom;
    transform: none;
    opacity: 1; } }
.rotateInUpLeft {
  animation-name: rotateInUpLeft; }
@keyframes rotateInUpRight {
  from {
    transform-origin: right bottom;
    transform: rotate3d(0, 0, 1, -90deg);
    opacity: 0; }
  to {
    transform-origin: right bottom;
    transform: none;
    opacity: 1; } }
.rotateInUpRight {
  animation-name: rotateInUpRight; }
@keyframes rotateOut {
  from {
    transform-origin: center;
    opacity: 1; }
  to {
    transform-origin: center;
    transform: rotate3d(0, 0, 1, 200deg);
    opacity: 0; } }
.rotateOut {
  animation-name: rotateOut; }
@keyframes rotateOutDownLeft {
  from {
    transform-origin: left bottom;
    opacity: 1; }
  to {
    transform-origin: left bottom;
    transform: rotate3d(0, 0, 1, 45deg);
    opacity: 0; } }
.rotateOutDownLeft {
  animation-name: rotateOutDownLeft; }
@keyframes rotateOutDownRight {
  from {
    transform-origin: right bottom;
    opacity: 1; }
  to {
    transform-origin: right bottom;
    transform: rotate3d(0, 0, 1, -45deg);
    opacity: 0; } }
.rotateOutDownRight {
  animation-name: rotateOutDownRight; }
@keyframes rotateOutUpLeft {
  from {
    transform-origin: left bottom;
    opacity: 1; }
  to {
    transform-origin: left bottom;
    transform: rotate3d(0, 0, 1, -45deg);
    opacity: 0; } }
.rotateOutUpLeft {
  animation-name: rotateOutUpLeft; }
@keyframes rotateOutUpRight {
  from {
    transform-origin: right bottom;
    opacity: 1; }
  to {
    transform-origin: right bottom;
    transform: rotate3d(0, 0, 1, 90deg);
    opacity: 0; } }
.rotateOutUpRight {
  animation-name: rotateOutUpRight; }
@keyframes hinge {
  0% {
    transform-origin: top left;
    animation-timing-function: ease-in-out; }
  20%, 60% {
    transform: rotate3d(0, 0, 1, 80deg);
    transform-origin: top left;
    animation-timing-function: ease-in-out; }
  40%, 80% {
    transform: rotate3d(0, 0, 1, 60deg);
    transform-origin: top left;
    animation-timing-function: ease-in-out;
    opacity: 1; }
  to {
    transform: translate3d(0, 700px, 0);
    opacity: 0; } }
.hinge {
  animation-name: hinge; }

/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */
@keyframes rollIn {
  from {
    opacity: 0;
    transform: translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg); }
  to {
    opacity: 1;
    transform: none; } }
.rollIn {
  animation-name: rollIn; }

/* originally authored by Nick Pettit - https://github.com/nickpettit/glide */
@keyframes rollOut {
  from {
    opacity: 1; }
  to {
    opacity: 0;
    transform: translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg); } }
.rollOut {
  animation-name: rollOut; }
@keyframes zoomIn {
  from {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3); }
  50% {
    opacity: 1; } }
.zoomIn {
  animation-name: zoomIn; }
@keyframes zoomInDown {
  from {
    opacity: 0;
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -1000px, 0);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19); }
  60% {
    opacity: 1;
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1); } }
.zoomInDown {
  animation-name: zoomInDown; }
@keyframes zoomInLeft {
  from {
    opacity: 0;
    transform: scale3d(0.1, 0.1, 0.1) translate3d(-1000px, 0, 0);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19); }
  60% {
    opacity: 1;
    transform: scale3d(0.475, 0.475, 0.475) translate3d(10px, 0, 0);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1); } }
.zoomInLeft {
  animation-name: zoomInLeft; }
@keyframes zoomInRight {
  from {
    opacity: 0;
    transform: scale3d(0.1, 0.1, 0.1) translate3d(1000px, 0, 0);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19); }
  60% {
    opacity: 1;
    transform: scale3d(0.475, 0.475, 0.475) translate3d(-10px, 0, 0);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1); } }
.zoomInRight {
  animation-name: zoomInRight; }
@keyframes zoomInUp {
  from {
    opacity: 0;
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 1000px, 0);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19); }
  60% {
    opacity: 1;
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1); } }
.zoomInUp {
  animation-name: zoomInUp; }
@keyframes zoomOut {
  from {
    opacity: 1; }
  50% {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3); }
  to {
    opacity: 0; } }
.zoomOut {
  animation-name: zoomOut; }
@keyframes zoomOutDown {
  40% {
    opacity: 1;
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19); }
  to {
    opacity: 0;
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, 2000px, 0);
    transform-origin: center bottom;
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1); } }
.zoomOutDown {
  animation-name: zoomOutDown; }
@keyframes zoomOutLeft {
  40% {
    opacity: 1;
    transform: scale3d(0.475, 0.475, 0.475) translate3d(42px, 0, 0); }
  to {
    opacity: 0;
    transform: scale(0.1) translate3d(-2000px, 0, 0);
    transform-origin: left center; } }
.zoomOutLeft {
  animation-name: zoomOutLeft; }
@keyframes zoomOutRight {
  40% {
    opacity: 1;
    transform: scale3d(0.475, 0.475, 0.475) translate3d(-42px, 0, 0); }
  to {
    opacity: 0;
    transform: scale(0.1) translate3d(2000px, 0, 0);
    transform-origin: right center; } }
.zoomOutRight {
  animation-name: zoomOutRight; }
@keyframes zoomOutUp {
  40% {
    opacity: 1;
    transform: scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19); }
  to {
    opacity: 0;
    transform: scale3d(0.1, 0.1, 0.1) translate3d(0, -2000px, 0);
    transform-origin: center bottom;
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1); } }
.zoomOutUp {
  animation-name: zoomOutUp; }
@keyframes slideInDown {
  from {
    transform: translate3d(0, -100%, 0);
    visibility: visible; }
  to {
    transform: translate3d(0, 0, 0); } }
.slideInDown {
  animation-name: slideInDown; }
@keyframes slideInLeft {
  from {
    transform: translate3d(-100%, 0, 0);
    visibility: visible; }
  to {
    transform: translate3d(0, 0, 0); } }
.slideInLeft {
  animation-name: slideInLeft; }
@keyframes slideInRight {
  from {
    transform: translate3d(100%, 0, 0);
    visibility: visible; }
  to {
    transform: translate3d(0, 0, 0); } }
.slideInRight {
  animation-name: slideInRight; }
@keyframes slideInUp {
  from {
    transform: translate3d(0, 100%, 0);
    visibility: visible; }
  to {
    transform: translate3d(0, 0, 0); } }
.slideInUp {
  animation-name: slideInUp; }
@keyframes slideOutDown {
  from {
    transform: translate3d(0, 0, 0); }
  to {
    visibility: hidden;
    transform: translate3d(0, 100%, 0); } }
.slideOutDown {
  animation-name: slideOutDown; }
@keyframes slideOutLeft {
  from {
    transform: translate3d(0, 0, 0); }
  to {
    visibility: hidden;
    transform: translate3d(-100%, 0, 0); } }
.slideOutLeft {
  animation-name: slideOutLeft; }
@keyframes slideOutRight {
  from {
    transform: translate3d(0, 0, 0); }
  to {
    visibility: hidden;
    transform: translate3d(100%, 0, 0); } }
.slideOutRight {
  animation-name: slideOutRight; }
@keyframes slideOutUp {
  from {
    transform: translate3d(0, 0, 0); }
  to {
    visibility: hidden;
    transform: translate3d(0, -100%, 0); } }
.slideOutUp {
  animation-name: slideOutUp; }


// ↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧↧
// Description: Grid System.
// Last update: 19/02/2016
// ↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥↥

@mixin grid( $colSpan, $colunms: $grid-columns, $gutter: $grid-gutter, $offset: 0 ) {

  /*
    Check if $colSpan is a valid integer number then process the parameters
    passed to the grid() mixin.
  */
  @if type-of( $colSpan ) == 'number' and round( $colSpan ) == $colSpan {

    float: left;
    box-sizing: border-box;

    // Variables operator
    $initColWidth: ( $colSpan * 100 ) / $colunms;
    $newOffset: ( $offset * 100 ) / $colunms;

    /*
      If $grid-use-gutters is set to false (true by default) set the
      element width based on the $initColWidth process result.
    */
    width: $initColWidth + unquote("%");

      /*
        Check if not 0 $offset is passed as argument and then if $gutter is 0
        set the left (based on direction) margin as offset.
      */

      margin-left: $newOffset + unquote("%");
      
      /*
        If $offset and $gutter aren't 0 set the left offset by adding the gutter
      */
      @if $grid-use-gutters == true {
        padding: 0 ($gutter / 2);
      }

  }
  /*
    If the first argument ($colSpan) is set to 'none' remove
    all grid style and floatings
  */
  @else if $colSpan == none {
    float: none;
    width: auto;
    margin: auto;
  }
}
